services:
  database:
    name: PostgreSQL Database
    description: PostgreSQL database for portfolio data
    triggeredBy:
      - postEnvironmentStart
    commands:
      start: |
        echo "Starting PostgreSQL database..."
        
        # Start PostgreSQL if not already running
        if ! pg_isready 2>/dev/null; then
          sudo service postgresql start
        fi
        
        # Wait for PostgreSQL to be ready
        for i in {1..30}; do
          if pg_isready 2>/dev/null; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 1
        done
        
        # Create database if it doesn't exist
        psql -h localhost -U postgres -c "CREATE DATABASE portfolio_db;" 2>/dev/null || echo "Database already exists"
        
        # Initialize database schema
        cd /workspaces/workshop/backend
        node init-db.js
        
        echo "✅ PostgreSQL initialized successfully"
        
        # Keep the service running
        tail -f /dev/null
      
      ready: |
        # Check if PostgreSQL is accepting connections
        pg_isready -q
      
      stop: |
        # Stop PostgreSQL service
        sudo service postgresql stop || true
        echo "PostgreSQL stopped"

  backend:
    name: Backend API
    description: Node.js Express API server
    triggeredBy:
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/workshop/backend
        echo "Starting backend API..."
        npm start
      
      ready: |
        # Check if backend API is responding
        curl -f -s http://localhost:3001/api/health > /dev/null
      
      stop: |
        # Stop backend API (npm start runs in foreground, will be killed by automation)
        echo "Backend API stopped"

  frontend:
    name: Frontend Dev Server
    description: React + Vite development server
    triggeredBy:
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/workshop/frontend
        echo "Starting frontend dev server..."
        npm run dev
      
      ready: |
        # Check if frontend dev server is responding
        curl -f -s http://localhost:3000 > /dev/null
      
      stop: |
        # Stop frontend dev server (npm run dev runs in foreground, will be killed by automation)
        echo "Frontend dev server stopped"

tasks:
  install-dependencies:
    name: Install Dependencies
    description: Install npm dependencies for backend and frontend
    triggeredBy:
      - postDevcontainerStart
      - manual
    command: |
      echo "Installing backend dependencies..."
      cd /workspaces/workshop/backend && npm install
      echo "Installing frontend dependencies..."
      cd /workspaces/workshop/frontend && npm install
      echo "✅ All dependencies installed"